#include "heat.h"

/*
 * Function to copy one matrix into another
 */

void copy_mat (double *u, double *v, unsigned sizex, unsigned sizey)
{
     #pragma omp parallel for
     for (int i=1; i<=sizex-2; i++)
        for (int j=1; j<=sizey-2; j++) 
            v[ i*sizey+j ] = u[ i*sizey+j ];
}

/*
 * Blocked Gauss-Seidel solver: one iteration step
 */
double relax_gauss (double *u, unsigned sizex, unsigned sizey)
{
    double unew, diff, sum=0.0;

    int howmany = 8;
    int blockfinished[howmany];

    for (int i = 0; i < howmany; ++i) blockfinished[i] = 0;

    #pragma omp parallel for private(unew,diff) reduction(+:sum)
    for (int blockid = 0; blockid < howmany; ++blockid) {
       int i_start = lowerb(blockid, howmany, sizex);
       int i_end = upperb(blockid, howmany, sizex);

       for (int columna = 0; columna < howmany; ++columna) {
           int j_start = lowerb(columna, howmany, sizey);
           int j_end = upperb(columna, howmany, sizey);
           if (blockid > 0) {
               while (blockfinished[blockid-1] <= columna) {
                #pragma omp flush
               }
           }
           for (int i=max(1, i_start); i<= min(sizex-2, i_end); i++) {
	         for (int j=max(1, j_start); j<= min(sizey-2, j_end); j++) {
	           unew= 0.25 * ( u[ i*sizey	+ (j-1) ]+  // left
			   u[ i*sizey	+ (j+1) ]+  // right
			   u[ (i-1)*sizey	+ j     ]+  // top
			   u[ (i+1)*sizey	+ j     ]); // bottom
	           diff = unew - u[i*sizey+ j];
	           sum += diff * diff; 
	           u[i*sizey+j]=unew;
              }
           }
	        blockfinished[blockid]++;
            #pragma omp flush        
       }
    } 
    return sum;
}
